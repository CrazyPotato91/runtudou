{"remainingRequest":"/Users/chenzhe/blog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenzhe/blog/packages/theme-gungnir/components/PageNav.vue?vue&type=style&index=0&lang=stylus&","dependencies":[{"path":"/Users/chenzhe/blog/packages/theme-gungnir/components/PageNav.vue","mtime":1630639090000},{"path":"/Users/chenzhe/blog/node_modules/css-loader/dist/cjs.js","mtime":1632030570508},{"path":"/Users/chenzhe/blog/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1632030570748},{"path":"/Users/chenzhe/blog/node_modules/postcss-loader/src/index.js","mtime":1623130371850},{"path":"/Users/chenzhe/blog/node_modules/stylus-loader/index.js","mtime":1632030571145},{"path":"/Users/chenzhe/blog/node_modules/cache-loader/dist/cjs.js","mtime":1632030570429},{"path":"/Users/chenzhe/blog/node_modules/vue-loader/lib/index.js","mtime":1632030570748}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQHJlcXVpcmUgJy4uL3N0eWxlcy93cmFwcGVyLnN0eWwnCgoucGFnZS1uYXYKICBAZXh0ZW5kICR3cmFwcGVyCiAgcGFkZGluZy10b3AgMXJlbQogIHBhZGRpbmctYm90dG9tIDAKICAuaW5uZXIKICAgIG1pbi1oZWlnaHQgMnJlbQogICAgbWFyZ2luLXRvcCAwCiAgICBib3JkZXItdG9wIDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpCiAgICBwYWRkaW5nLXRvcCAxcmVtCiAgICBvdmVyZmxvdyBhdXRvIC8vIGNsZWFyIGZsb2F0CiAgLm5leHQKICAgIGZsb2F0IHJpZ2h0CgpAbWVkaWEgKG1heC13aWR0aDogKCRNUUlwYWQgKyAxcHgpKQogIC5wYWdlLW5hdgogICAgcGFkZGluZy1ib3R0b20gMnJlbQo="},{"version":3,"sources":["PageNav.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"PageNav.vue","sourceRoot":"packages/theme-gungnir/components","sourcesContent":["<template>\n  <div v-if=\"prev || next\" class=\"page-nav\">\n    <p class=\"inner\">\n      <span v-if=\"prev\" class=\"prev\">\n        ←\n        <a\n          v-if=\"prev.type === 'external'\"\n          class=\"prev\"\n          :href=\"prev.path\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {{ prev.title || prev.path }}\n        </a>\n\n        <RouterLink v-else class=\"prev\" :to=\"prev.path\">\n          {{ prev.title || prev.path }}\n        </RouterLink>\n      </span>\n\n      <span v-if=\"next\" class=\"next\">\n        <a\n          v-if=\"next.type === 'external'\"\n          :href=\"next.path\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {{ next.title || next.path }}\n        </a>\n\n        <RouterLink v-else :to=\"next.path\">\n          {{ next.title || next.path }}\n        </RouterLink>\n        →\n      </span>\n    </p>\n  </div>\n</template>\n\n<script>\nimport { resolvePage } from \"@theme/utils/utils\";\nimport isString from \"lodash/isString\";\nimport isNil from \"lodash/isNil\";\n\nexport default {\n  name: \"PageNav\",\n\n  props: {\n    sidebarItems: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  computed: {\n    prev() {\n      return resolvePageLink(LINK_TYPES.PREV, this);\n    },\n    next() {\n      return resolvePageLink(LINK_TYPES.NEXT, this);\n    }\n  }\n};\n\nfunction resolvePrev(page, items) {\n  return find(page, items, -1);\n}\n\nfunction resolveNext(page, items) {\n  return find(page, items, 1);\n}\n\nconst LINK_TYPES = {\n  NEXT: {\n    resolveLink: resolveNext,\n    getThemeLinkConfig: ({ nextLinks }) => nextLinks,\n    getPageLinkConfig: ({ frontmatter }) => frontmatter.next\n  },\n  PREV: {\n    resolveLink: resolvePrev,\n    getThemeLinkConfig: ({ prevLinks }) => prevLinks,\n    getPageLinkConfig: ({ frontmatter }) => frontmatter.prev\n  }\n};\n\nfunction resolvePageLink(\n  linkType,\n  { $themeConfig, $page, $route, $site, sidebarItems }\n) {\n  const { resolveLink, getThemeLinkConfig, getPageLinkConfig } = linkType;\n\n  // Get link config from theme\n  const themeLinkConfig = getThemeLinkConfig($themeConfig);\n\n  // Get link config from current page\n  const pageLinkConfig = getPageLinkConfig($page);\n\n  // Page link config will overwrite global theme link config if defined\n  const link = isNil(pageLinkConfig) ? themeLinkConfig : pageLinkConfig;\n\n  if (link === false) {\n    return;\n  } else if (isString(link)) {\n    return resolvePage($site.pages, link, $route.path);\n  } else {\n    return resolveLink($page, sidebarItems);\n  }\n}\n\nfunction find(page, items, offset) {\n  const res = [];\n  flatten(items, res);\n  for (let i = 0; i < res.length; i++) {\n    const cur = res[i];\n    if (cur.type === \"page\" && cur.path === decodeURIComponent(page.path)) {\n      return res[i + offset];\n    }\n  }\n}\n\nfunction flatten(items, res) {\n  for (let i = 0, l = items.length; i < l; i++) {\n    if (items[i].type === \"group\") {\n      flatten(items[i].children || [], res);\n    } else {\n      res.push(items[i]);\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\">\n@require '../styles/wrapper.styl'\n\n.page-nav\n  @extend $wrapper\n  padding-top 1rem\n  padding-bottom 0\n  .inner\n    min-height 2rem\n    margin-top 0\n    border-top 1px solid var(--border-color)\n    padding-top 1rem\n    overflow auto // clear float\n  .next\n    float right\n\n@media (max-width: ($MQIpad + 1px))\n  .page-nav\n    padding-bottom 2rem\n</style>\n"]}]}